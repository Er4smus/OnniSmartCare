/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.neusoft.babymonitor.backend.webcam.ui.view;

/*
 This file is part of “Onni smart care desktop application” software
 Copyright (C) <2013>  Erasmus van Niekerk <erasmus.van.nieker@gmail.com>

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import static com.neusoft.babymonitor.backend.webcam.Constants.LINUX;
import static com.neusoft.babymonitor.backend.webcam.Constants.WINDOWS;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import com.neusoft.babymonitor.backend.webcam.util.DeviceType;
import com.neusoft.babymonitor.backend.webcam.util.WebcamUtil;

public class UIView extends javax.swing.JFrame {

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField babyIdTextField;
    private javax.swing.JLabel devicesLabel;
    private javax.swing.JLabel errorMessage;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JLabel loadingLabel;
    private javax.swing.JLabel logo;
    private javax.swing.JComboBox<String> microphoneDropdown;
    private javax.swing.JSeparator separatorLine;
    private javax.swing.JButton startStreamingButton;
    private javax.swing.JComboBox<String> webcamDropdown;
    // End of variables declaration//GEN-END:variables

    // UI messages
    private static final String CHOOSE_DEVICE = "Choose the devices you want to use:";
    private static final String CONNECT_BUTTON_MESSAGGE = "Connect to web portal";
    private static final String HELP_MESSAGE = "<html>Please enter the webcam code of the baby to connect to the web portal.<br/> You can get the code from the Baby Profile, on the Onni Smart<br/>Care web portal.</html>";
    private static final String OS_NOT_SUPPORTED = "Your Operating System is not supported";
    private static final String WEBCAM_UNPLUGGED = "Please connect a webcam and a microphone to your computer";
    private static final String STREAMING_RUNNING = "Streaming is already running on this computer.";

    /**
     * Creates new form View
     */
    public UIView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        babyIdTextField = new javax.swing.JTextField();
        // Display a popup menu with paste action when right click is pressed
        babyIdTextField.addMouseListener(new ContextMenuMouseListener());
        errorMessage = new javax.swing.JLabel();
        infoLabel = new javax.swing.JLabel();
        startStreamingButton = new javax.swing.JButton();
        logo = new javax.swing.JLabel();
        loadingLabel = new javax.swing.JLabel();
        devicesLabel = new javax.swing.JLabel();
        webcamDropdown = new javax.swing.JComboBox<String>();
        microphoneDropdown = new javax.swing.JComboBox<String>();
        separatorLine = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setBackground(new java.awt.Color(255, 255, 255));

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logo.png"))); // NOI18N

        infoLabel.setForeground(new java.awt.Color(128, 128, 128));

        separatorLine.setForeground(new java.awt.Color(128, 128, 128));
        separatorLine.setVisible(false);

        // if the current OS is not supported, display a notification
        if (!isOSSupported()) {
            hideFields(OS_NOT_SUPPORTED);
        }

        // streaming cannot be started from the same computer twice at the same time
        else if (isFfmpegRunning()) {
            hideFields(STREAMING_RUNNING);
        }

        // if there is no webcam or no microphone, display error message
        else if (!WebcamUtil.getInstance().areInputsConnected()) {
            hideFields(WEBCAM_UNPLUGGED);
        }

        // normal flow
        else {
            populateDeviceDropdowns();
            errorMessage.setBackground(new java.awt.Color(255, 255, 255));
            errorMessage.setForeground(new java.awt.Color(255, 0, 51));

            infoLabel.setForeground(new java.awt.Color(128, 128, 128));
            infoLabel.setText(HELP_MESSAGE);

            startStreamingButton.setBackground(new java.awt.Color(188, 226, 226));
            startStreamingButton.setForeground(new java.awt.Color(128, 128, 128));
            startStreamingButton.setText(CONNECT_BUTTON_MESSAGGE);

            loadingLabel.setBackground(new java.awt.Color(255, 255, 255));
            loadingLabel.setForeground(new java.awt.Color(128, 128, 128));

            devicesLabel.setForeground(new java.awt.Color(128, 128, 128));
            devicesLabel.setText(CHOOSE_DEVICE);

            webcamDropdown.setForeground(new java.awt.Color(128, 128, 128));

            microphoneDropdown.setForeground(new java.awt.Color(128, 128, 128));
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout
                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(
                        layout.createSequentialGroup().addContainerGap().addComponent(logo)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(
                        layout.createSequentialGroup()
                                .addGroup(
                                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(
                                                        layout.createSequentialGroup()
                                                                .addContainerGap()
                                                                .addComponent(separatorLine,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 518,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(
                                                        javax.swing.GroupLayout.Alignment.LEADING,
                                                        layout.createSequentialGroup()
                                                                .addGap(100, 100, 100)
                                                                .addGroup(
                                                                        layout.createParallelGroup(
                                                                                javax.swing.GroupLayout.Alignment.LEADING)
                                                                                .addComponent(loadingLabel)
                                                                                .addComponent(errorMessage)
                                                                                .addComponent(
                                                                                        startStreamingButton,
                                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                        216,
                                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addComponent(
                                                                                        microphoneDropdown,
                                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                        216,
                                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addComponent(
                                                                                        webcamDropdown,
                                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                        216,
                                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addComponent(devicesLabel)
                                                                                .addComponent(
                                                                                        babyIdTextField,
                                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                        216,
                                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addComponent(
                                                                                        infoLabel,
                                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                        450,
                                                                                        javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 40, Short.MAX_VALUE)));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(logo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(
                                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(
                                                layout.createSequentialGroup()
                                                        .addComponent(infoLabel)
                                                        .addPreferredGap(
                                                                javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(babyIdTextField,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(
                                                                javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(devicesLabel)
                                                        .addPreferredGap(
                                                                javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(webcamDropdown,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(
                                                                javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(microphoneDropdown,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18).addComponent(startStreamingButton)
                                                        .addGap(25, 25, 25))
                                        .addComponent(separatorLine, javax.swing.GroupLayout.PREFERRED_SIZE, 10,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(errorMessage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(loadingLabel)
                        .addContainerGap(106, Short.MAX_VALUE)));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void babyIdTextFieldListener(KeyListener event) {
        this.babyIdTextField.addKeyListener(event);
    }

    public void startStreamingMouseListener(MouseListener event) {
        this.startStreamingButton.addMouseListener(event);
    }
    
    public void babyIdTextFieldActionListener(ActionListener event){
        this.babyIdTextField.addActionListener(event);
    }

    public javax.swing.JTextField getBabyIdTextField() {
        return babyIdTextField;
    }

    public javax.swing.JLabel getErrorMessage() {
        return errorMessage;
    }

    public javax.swing.JLabel getInfoLabel() {
        return infoLabel;
    }

    public javax.swing.JButton getStartStreamingButton() {
        return startStreamingButton;
    }

    public javax.swing.JLabel getLoadingLabel() {
        return loadingLabel;
    }

    public void setLoadingText(String text) {
        loadingLabel.setText(text);
    }

    public javax.swing.JComboBox<String> getWebcamDropdown() {
        return webcamDropdown;
    }

    public javax.swing.JComboBox<String> getMicrophoneDropdown() {
        return microphoneDropdown;
    }

    public String getSelectedWebcam() {
        return String.valueOf(webcamDropdown.getSelectedItem());
    }

    public String getSelectedMicrophone() {
        return String.valueOf(microphoneDropdown.getSelectedItem());
    }

    public javax.swing.JSeparator getSeparatorLine() {
        return separatorLine;
    }

    public void populateDeviceDropdowns() {
        List<String> webcams = new ArrayList<String>();
        List<String> microphones = new ArrayList<String>();
        if (System.getProperty("os.name").startsWith(WINDOWS)) {
            // get webcams for Windows
            webcams = WebcamUtil.getWindowsDeviceNames(DeviceType.WEBCAM);
            // get the audio input devices names for Windows
            microphones = WebcamUtil.getWindowsDeviceNames(DeviceType.MICROPHONE);
            for (String microphone : microphones) {
                microphoneDropdown.addItem(microphone);
            }
            // mark the first one as selected
            WebcamUtil.getInstance().setMicrophone(microphones.get(0));
        } else if (System.getProperty("os.name").startsWith(LINUX)) {
            // get webcams for Linux
            webcams = WebcamUtil.getLinuxDeviceNames();
            microphoneDropdown.setVisible(false);
        }
        for (String webcam : webcams) {
            webcamDropdown.addItem(webcam);
        }
        // mark the first one as selected
        WebcamUtil.getInstance().setWebcam(webcams.get(0));

    }

    public boolean isOSSupported() {
        return System.getProperty("os.name").startsWith("Windows") || System.getProperty("os.name").startsWith("Linux");
    }

    /**
     * Hide some of the fiels in case the streaming cannot be started/is not allowed and display a message.
     * 
     * @param message message to be displayed, explaining what went wrong
     */
    public void hideFields(String message) {
        // hide fields
        startStreamingButton.setVisible(false);
        babyIdTextField.setVisible(false);
        webcamDropdown.setVisible(false);
        microphoneDropdown.setVisible(false);
        devicesLabel.setVisible(false);

        // set info message
        infoLabel.setText(message);

        pack();
    }

    /**
     * Check if the ffmpeg process is running.
     * 
     * @return true if ffmpeg is running; false otherwise
     */
    private boolean isFfmpegRunning() {
        String command[] = new String[1];
        if (System.getProperty("os.name").startsWith("Windows")) {
            command[0] = "tasklist";
        } else {
            command[0] = "ps -e";
        }
        try {
            Process process = Runtime.getRuntime().exec(command);
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line = bufferedReader.readLine();
            while (line != null) {
                if (line.contains("ffmpeg")) {
                    return true;
                }
                line = bufferedReader.readLine();
            }
        } catch (IOException e) {
        }

        return false;
    }
}
